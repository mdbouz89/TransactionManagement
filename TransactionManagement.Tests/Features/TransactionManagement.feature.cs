// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TransactionManagement.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GestionDesTransactionsFeature : object, Xunit.IClassFixture<GestionDesTransactionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TransactionManagement.feature"
#line hidden
        
        public GestionDesTransactionsFeature(GestionDesTransactionsFeature.FixtureData fixtureData, TransactionManagement_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Gestion des transactions", "  En tant qu\'utilisateur\r\n  Je veux pouvoir gérer mes transactions financières\r\n " +
                    " Afin de suivre mon solde et mon historique", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Traiter plusieurs transactions et valider le solde")]
        [Xunit.TraitAttribute("FeatureTitle", "Gestion des transactions")]
        [Xunit.TraitAttribute("Description", "Traiter plusieurs transactions et valider le solde")]
        public void TraiterPlusieursTransactionsEtValiderLeSolde()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Traiter plusieurs transactions et valider le solde", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.Given("un solde initial de 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Amount",
                            "Description"});
                table1.AddRow(new string[] {
                            "Credit",
                            "500",
                            "Freelance Payment"});
                table1.AddRow(new string[] {
                            "Debit",
                            "200",
                            "Grocery Shopping"});
                table1.AddRow(new string[] {
                            "Debit",
                            "300",
                            "Utility Bill"});
                table1.AddRow(new string[] {
                            "Credit",
                            "1000",
                            "Bonus"});
#line 8
    testRunner.When("j\'ajoute les transactions suivantes :", ((string)(null)), table1, "When ");
#line hidden
#line 14
    testRunner.Then("le solde doit être de 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Amount",
                            "Description"});
                table2.AddRow(new string[] {
                            "Credit",
                            "500",
                            "Freelance Payment"});
                table2.AddRow(new string[] {
                            "Debit",
                            "200",
                            "Grocery Shopping"});
                table2.AddRow(new string[] {
                            "Debit",
                            "300",
                            "Utility Bill"});
                table2.AddRow(new string[] {
                            "Credit",
                            "1000",
                            "Bonus"});
#line 15
    testRunner.And("l\'historique des transactions devrait contenir :", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter une transaction de crédit qui dépasse le montant maximal")]
        [Xunit.TraitAttribute("FeatureTitle", "Gestion des transactions")]
        [Xunit.TraitAttribute("Description", "Ajouter une transaction de crédit qui dépasse le montant maximal")]
        public void AjouterUneTransactionDeCreditQuiDepasseLeMontantMaximal()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter une transaction de crédit qui dépasse le montant maximal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
    testRunner.Given("un solde initial de 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
    testRunner.When("j\'ajoute une transaction de type \"Crédit\" avec un montant de 12000 et une descrip" +
                        "tion \"Salaire\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Error"});
                table3.AddRow(new string[] {
                            "Le montant du crédit ne peut pas dépasser 10 000"});
#line 25
    testRunner.Then("la transaction doit échouer avec le message d\'erreur :", ((string)(null)), table3, "Then ");
#line hidden
#line 28
    testRunner.And("le solde doit être de 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Amount",
                            "Description"});
#line 29
    testRunner.And("l\'historique des transactions devrait contenir :", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ajouter une transaction de débit qui dépasse le découvert autorisé du solde")]
        [Xunit.TraitAttribute("FeatureTitle", "Gestion des transactions")]
        [Xunit.TraitAttribute("Description", "Ajouter une transaction de débit qui dépasse le découvert autorisé du solde")]
        public void AjouterUneTransactionDeDebitQuiDepasseLeDecouvertAutoriseDuSolde()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ajouter une transaction de débit qui dépasse le découvert autorisé du solde", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
    testRunner.Given("un solde initial de 500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
    testRunner.When("j\'ajoute une transaction de type \"Débit\" avec un montant de 6000 et une descripti" +
                        "on \"Loyer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Error"});
                table5.AddRow(new string[] {
                            "Le solde ne peut pas être inférieur à -5 000"});
#line 35
    testRunner.Then("la transaction doit échouer avec le message d\'erreur :", ((string)(null)), table5, "Then ");
#line hidden
#line 38
    testRunner.And("le solde doit rester à 500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GestionDesTransactionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GestionDesTransactionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
